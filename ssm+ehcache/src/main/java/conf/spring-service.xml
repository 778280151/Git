<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- Spring希望管理所有的业务逻辑组件，等。。。 -->
	<context:component-scan base-package="com.atguigu.mybatis">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
	<!-- 引入数据库的配置文件 -->
	<context:property-placeholder location="classpath:/conf/dbconfig.properties" />
	
	
	<!-- Spring用来控制业务逻辑。数据源、事务控制、aop -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${oracle.driverClass}"></property>
		<property name="password" value="${oracle.password}"></property>
		<property name="jdbcUrl" value="${oracle.url}"></property>
		<property name="user" value="${oracle.username}"></property>
	</bean>
	
	
	<!-- spring事务管理 -->
	<bean id="dataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 开启基于注解的事务 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager" />


	<!-- 整合mybatis 目的：1、spring管理所有组件。mapper的实现类。 service==>Dao @Autowired:自动注入mapper； 
		2、spring用来管理事务，spring声明式事务 -->
	<!--创建出SqlSessionFactory对象 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- configLocation指定全局配置文件的位置 -->
		<property name="configLocation" value="classpath:/conf/mybatis.xml"></property>
		<!--mapperLocations: 指定mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:/conf/mybatis/mapper/*.xml"></property>
		<!--mapperLocations: 指定pojo类位置，开启包名代替全类名 -->
	    <property name="typeAliasesPackage" value="com.atguigu.mybatis.bean"></property>
	</bean>
	
	
	<!--配置一个可以进行批量执行的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>

	<!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入； base-package：指定mapper接口的包名 -->
	<mybatis-spring:scan base-package="com.atguigu.mybatis.dao" />
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.atguigu.mybatis.dao"></property> </bean> -->

	<!-- spring开启ehcache -->
	        <!-- 1.开启spring cache 注解功能 -->
			<cache:annotation-driven cache-manager="cacheManager" />
		    <!-- 2.cacheManager工厂类，指定ehcache.xml的位置 -->  
			<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
				<property name="cacheManager" ref="ehcache"></property>
			</bean>
		
			<bean id="ehcache"
				class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
				<property name="configLocation" value="classpath:/conf/ehcache.xml"></property>
			</bean>
</beans>
